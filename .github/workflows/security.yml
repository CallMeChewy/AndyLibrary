# File: security.yml
# Path: /home/herb/Desktop/AndyLibrary/.github/workflows/security.yml
# Standard: AIDEV-PascalCase-2.1
# Created: 2025-07-26
# Last Modified: 2025-07-26 06:07AM

name: Security & Code Quality

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 4 * * 1'  # Weekly on Monday at 4 AM UTC
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit cyclonedx-bom
        
    - name: Generate SBOM (Software Bill of Materials)
      run: |
        cyclonedx-py -r -o sbom.json
        
    - name: Safety vulnerability scan
      run: |
        safety check -r requirements.txt --json --output safety-report.json || true
        safety check -r requirements.txt || echo "Vulnerabilities found - check report"
        
    - name: Pip-audit scan
      run: |
        pip-audit -r requirements.txt --format=json --output=pip-audit-report.json || true
        pip-audit -r requirements.txt || echo "Audit findings - check report"
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-dependency-reports
        path: |
          sbom.json
          safety-report.json
          pip-audit-report.json
        retention-days: 90

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install code security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit semgrep
        
    - name: Bandit security linter
      run: |
        bandit -r Source/ -f json -o bandit-report.json -ll || true
        bandit -r Source/ -ll || echo "Security issues found - check report"
        
    - name: Semgrep security scan
      run: |
        semgrep --config=auto Source/ --json --output=semgrep-report.json || true
        
    - name: Check for hardcoded secrets
      run: |
        echo "Scanning for potential secrets..."
        
        # Check for common secret patterns
        grep -r -i "password\s*=" Source/ && echo "⚠️ Potential hardcoded password found" || echo "✅ No hardcoded passwords"
        grep -r -i "api[_-]key" Source/ && echo "⚠️ Potential API key found" || echo "✅ No API keys"
        grep -r -i "secret\s*=" Source/ && echo "⚠️ Potential secret found" || echo "✅ No hardcoded secrets"
        grep -r -i "token\s*=" Source/ && echo "⚠️ Potential token found" || echo "✅ No hardcoded tokens"
        
        # Educational mission specific checks
        echo "Checking educational mission compliance..."
        grep -r -i "cost.*track" Source/ && echo "✅ Cost tracking found" || echo "⚠️ No cost tracking"
        
    - name: Upload code security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-security-reports
        path: |
          bandit-report.json
          semgrep-report.json
        retention-days: 90

  configuration-audit:
    name: Configuration Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Audit configuration files
      run: |
        echo "🔍 Configuration Security Audit"
        echo "==============================="
        
        # Check for sensitive configuration files
        echo "Checking configuration files..."
        
        if [ -f "Config/google_credentials.json" ]; then
          echo "⚠️ Google credentials file present - ensure it's not committed to public repos"
          # Verify it's in .gitignore
          grep -q "google_credentials.json" .gitignore && echo "✅ Google credentials in .gitignore" || echo "❌ Google credentials NOT in .gitignore"
        else
          echo "✅ No Google credentials file in repo"
        fi
        
        # Check OAuth configuration security
        if [ -f "Config/social_auth_config.json" ]; then
          echo "Checking OAuth configuration security..."
          if grep -q "client_secret" Config/social_auth_config.json; then
            echo "⚠️ OAuth client secrets may be present - ensure proper protection"
          fi
        fi
        
        # Check for development vs production configs
        echo "Checking configuration safety..."
        if [ -f "Config/andygoogle_config.json" ]; then
          if grep -q '"debug".*true' Config/andygoogle_config.json; then
            echo "⚠️ Debug mode enabled in config"
          fi
          if grep -q '"test_mode".*false' Config/andygoogle_config.json; then
            echo "⚠️ Production mode detected"
          fi
        fi
        
        echo "Configuration audit complete."

  educational-mission-security:
    name: Educational Mission Security Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Educational mission security audit
      run: |
        echo "🎓 Educational Mission Security Audit"
        echo "====================================="
        
        # Check for cost protection measures
        echo "Checking cost protection measures..."
        grep -r -i "cost.*protect" Source/ && echo "✅ Cost protection code found" || echo "⚠️ No explicit cost protection"
        grep -r -i "data.*charge" Source/ && echo "✅ Data charge awareness found" || echo "⚠️ No data charge protection"
        
        # Check for offline capability
        echo "Checking offline capability..."
        grep -r -i "offline" Source/ && echo "✅ Offline functionality found" || echo "⚠️ No offline capability"
        grep -r -i "cache" Source/ && echo "✅ Caching functionality found" || echo "⚠️ No caching found"
        
        # Check for budget device considerations
        echo "Checking budget device optimization..."
        grep -r -i "memory.*limit" Source/ && echo "✅ Memory limit checks found" || echo "⚠️ No memory limit checks"
        grep -r -i "performance" Source/ && echo "✅ Performance considerations found" || echo "⚠️ No performance optimization"
        
        # Check for authentication security
        echo "Checking authentication security..."
        grep -r -i "bcrypt\|hash.*password" Source/ && echo "✅ Password hashing found" || echo "❌ No password hashing"
        grep -r -i "session.*timeout" Source/ && echo "✅ Session timeout found" || echo "⚠️ No session timeout"
        
        # Check for data validation
        echo "Checking data validation..."
        grep -r -i "validate\|sanitize" Source/ && echo "✅ Data validation found" || echo "⚠️ No data validation"
        
        echo "Educational mission security audit complete."

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy pylint
        pip install -r requirements.txt
        
    - name: Flake8 linting
      run: |
        flake8 Source/ --max-line-length=127 --extend-ignore=E203,W503 --output-file=flake8-report.txt || true
        
    - name: Black code formatting check
      run: |
        black --check Source/ --diff > black-report.txt || true
        
    - name: Import sorting check
      run: |
        isort Source/ --check-only --diff > isort-report.txt || true
        
    - name: MyPy type checking
      run: |
        mypy Source/ --ignore-missing-imports --output=mypy-report.txt || true
        
    - name: Pylint analysis
      run: |
        pylint Source/ --output-format=text --reports=y > pylint-report.txt || true
        
    - name: Upload code quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-reports
        path: |
          flake8-report.txt
          black-report.txt
          isort-report.txt
          mypy-report.txt
          pylint-report.txt
        retention-days: 30

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, configuration-audit, educational-mission-security, code-quality]
    if: always()
    
    steps:
    - name: Download all security reports
      uses: actions/download-artifact@v4
      with:
        path: security-reports/
        
    - name: Generate security summary
      run: |
        echo "# 🔒 AndyLibrary Security Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Security Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Check job results
        if [[ "${{ needs.dependency-scan.result }}" == "success" ]]; then
          echo "✅ Dependency Scan: PASSED" >> security-summary.md
        else
          echo "❌ Dependency Scan: FAILED" >> security-summary.md
        fi
        
        if [[ "${{ needs.code-security-scan.result }}" == "success" ]]; then
          echo "✅ Code Security Scan: PASSED" >> security-summary.md
        else
          echo "❌ Code Security Scan: FAILED" >> security-summary.md
        fi
        
        if [[ "${{ needs.configuration-audit.result }}" == "success" ]]; then
          echo "✅ Configuration Audit: PASSED" >> security-summary.md
        else
          echo "❌ Configuration Audit: FAILED" >> security-summary.md
        fi
        
        if [[ "${{ needs.educational-mission-security.result }}" == "success" ]]; then
          echo "✅ Educational Mission Security: PASSED" >> security-summary.md
        else
          echo "❌ Educational Mission Security: FAILED" >> security-summary.md
        fi
        
        if [[ "${{ needs.code-quality.result }}" == "success" ]]; then
          echo "✅ Code Quality: PASSED" >> security-summary.md
        else
          echo "❌ Code Quality: NEEDS ATTENTION" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Educational Mission Security Status" >> security-summary.md
        echo "" >> security-summary.md
        
        # Overall assessment
        if [[ "${{ needs.dependency-scan.result }}" == "success" && "${{ needs.code-security-scan.result }}" == "success" && "${{ needs.educational-mission-security.result }}" == "success" ]]; then
          echo "🎉 **Security assessment PASSED!**" >> security-summary.md
          echo "" >> security-summary.md
          echo "AndyLibrary maintains security standards appropriate for its educational mission:" >> security-summary.md
          echo "- 🔐 Secure authentication and session management" >> security-summary.md
          echo "- 💰 Cost protection measures in place" >> security-summary.md
          echo "- 📱 Student data protection" >> security-summary.md
          echo "- 🌐 Offline-first security model" >> security-summary.md
        else
          echo "⚠️ **Security issues detected - student safety at risk**" >> security-summary.md
          echo "" >> security-summary.md
          echo "Please review security reports to ensure student protection." >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Next Steps" >> security-summary.md
        echo "" >> security-summary.md
        echo "1. Review individual security reports in artifacts" >> security-summary.md
        echo "2. Address any high-priority security findings" >> security-summary.md
        echo "3. Update dependencies with known vulnerabilities" >> security-summary.md
        echo "4. Ensure educational mission security requirements are met" >> security-summary.md
        
        cat security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md
        retention-days: 90

  security-badge:
    name: Update Security Badge
    runs-on: ubuntu-latest
    needs: security-summary
    if: github.ref == 'refs/heads/main' && success()
    
    steps:
    - name: Create security badge
      run: |
        echo "🔒 Security: PASSED" > security-badge.txt
        echo "Last updated: $(date -u +'%Y-%m-%d %H:%M UTC')" >> security-badge.txt
        
    - name: Upload security badge
      uses: actions/upload-artifact@v4
      with:
        name: security-badge
        path: security-badge.txt
        retention-days: 30