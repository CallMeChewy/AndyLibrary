# File: windows-exe-build.yml
# Path: /home/herb/Desktop/AndyLibrary/.github/workflows/windows-exe-build.yml
# Standard: AIDEV-PascalCase-2.1
# Created: 2025-08-01
# Last Modified: 2025-08-01 09:25PM

name: üöÄ Bulletproof Windows EXE Build

on:
  push:
    paths:
      - 'AndyLibraryStandalone.py'
      - 'build_windows_exe.spec'
      - '.github/workflows/windows-exe-build.yml'
  workflow_dispatch:
    inputs:
      reason:
        description: 'Build reason'
        required: false
        default: 'Manual build trigger'

jobs:
  build-windows-exe:
    name: üèóÔ∏è Build Standalone Windows EXE
    runs-on: windows-latest
    
    steps:
    - name: üì• Checkout Repository
      uses: actions/checkout@v4
      
    - name: üêç Setup Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install fastapi uvicorn[standard]
        pip install requests aiofiles
        pip install google-auth google-auth-oauthlib google-auth-httplib2
        pip install googleapiclient cryptography pydantic starlette psutil
        
    - name: üîç Verify Build Environment
      shell: powershell
      run: |
        Write-Host "=== BUILD ENVIRONMENT VERIFICATION ===" -ForegroundColor Green
        Write-Host "Python Version:" -ForegroundColor Yellow
        python --version
        Write-Host "`nPyInstaller Version:" -ForegroundColor Yellow
        pyinstaller --version
        Write-Host "`nChecking Critical Files:" -ForegroundColor Yellow
        
        if (Test-Path "AndyLibraryStandalone.py") {
          Write-Host "‚úÖ AndyLibraryStandalone.py found" -ForegroundColor Green
          $size = (Get-Item "AndyLibraryStandalone.py").Length
          Write-Host "   Size: $([math]::Round($size/1KB, 2)) KB"
        } else {
          Write-Host "‚ùå AndyLibraryStandalone.py missing" -ForegroundColor Red
          exit 1
        }
        
        if (Test-Path "build_windows_exe.spec") {
          Write-Host "‚úÖ build_windows_exe.spec found" -ForegroundColor Green
        } else {
          Write-Host "‚ùå build_windows_exe.spec missing" -ForegroundColor Red
          exit 1
        }
        
        Write-Host "`nSource Directory Structure:" -ForegroundColor Yellow
        if (Test-Path "Source") {
          Get-ChildItem "Source" -Directory | ForEach-Object { Write-Host "   üìÅ Source/$($_.Name)" }
          Write-Host "‚úÖ Source directory verified"
        } else {
          Write-Host "‚ùå Source directory missing" -ForegroundColor Red
          exit 1
        }
        
        Write-Host "`nWebPages Directory:" -ForegroundColor Yellow
        if (Test-Path "WebPages") {
          $webCount = (Get-ChildItem "WebPages" -File).Count
          Write-Host "‚úÖ WebPages directory found with $webCount files"
        } else {
          Write-Host "‚ùå WebPages directory missing" -ForegroundColor Red
          exit 1
        }
        
    - name: üóÉÔ∏è Prepare Database
      shell: powershell
      run: |
        Write-Host "=== DATABASE PREPARATION ===" -ForegroundColor Green
        
        # Check for various database locations
        $databaseFound = $false
        $dbPaths = @(
          "Data\Databases\MyLibrary.db",
          "Standalone\MyLibrary.db",
          "Standalone\GrandsonLibrary_Full.db"
        )
        
        foreach ($dbPath in $dbPaths) {
          if (Test-Path $dbPath) {
            $size = (Get-Item $dbPath).Length
            Write-Host "‚úÖ Found database: $dbPath ($([math]::Round($size/1MB, 2)) MB)" -ForegroundColor Green
            
            # Copy to Standalone directory for bundling
            if (-not (Test-Path "Standalone")) {
              New-Item -ItemType Directory -Path "Standalone"
            }
            Copy-Item $dbPath "Standalone\GrandsonLibrary_Full.db" -Force
            $databaseFound = $true
            break
          }
        }
        
        if (-not $databaseFound) {
          Write-Host "‚ö†Ô∏è No database found - executable will use demo mode" -ForegroundColor Yellow
          Write-Host "Available files:" -ForegroundColor Yellow
          Get-ChildItem -Recurse -Filter "*.db" | ForEach-Object { Write-Host "   $($_.FullName)" }
        }
        
    - name: üèóÔ∏è Build Windows Executable
      shell: powershell
      run: |
        Write-Host "=== BUILDING WINDOWS EXECUTABLE ===" -ForegroundColor Green
        Write-Host "Using PyInstaller with optimized spec file..." -ForegroundColor Yellow
        
        # Build with the prepared spec file
        pyinstaller build_windows_exe.spec --clean --noconfirm
        
        Write-Host "Build process completed" -ForegroundColor Green
        
    - name: ‚úÖ Verify Executable
      shell: powershell
      run: |
        Write-Host "=== EXECUTABLE VERIFICATION ===" -ForegroundColor Green
        
        if (Test-Path "dist\AndyLibrary.exe") {
          Write-Host "‚úÖ AndyLibrary.exe created successfully!" -ForegroundColor Green
          $size = (Get-Item "dist\AndyLibrary.exe").Length
          Write-Host "üìä Executable size: $([math]::Round($size/1MB, 2)) MB" -ForegroundColor Yellow
          
          # Quick test that the executable can start
          Write-Host "`nTesting executable startup..." -ForegroundColor Yellow
          $proc = Start-Process -FilePath "dist\AndyLibrary.exe" -ArgumentList "--help" -NoNewWindow -PassThru -Wait -ErrorAction SilentlyContinue
          if ($proc.ExitCode -eq 0 -or $proc.ExitCode -eq $null) {
            Write-Host "‚úÖ Executable passes basic startup test" -ForegroundColor Green
          } else {
            Write-Host "‚ö†Ô∏è Executable startup test inconclusive (exit code: $($proc.ExitCode))" -ForegroundColor Yellow
          }
          
        } else {
          Write-Host "‚ùå Build failed - AndyLibrary.exe not found" -ForegroundColor Red
          Write-Host "Checking dist directory contents:" -ForegroundColor Yellow
          if (Test-Path "dist") {
            Get-ChildItem "dist" | ForEach-Object { Write-Host "   $($_.Name)" }
          } else {
            Write-Host "   dist directory does not exist"
          }
          
          Write-Host "`nChecking build logs:" -ForegroundColor Yellow
          if (Test-Path "build") {
            Get-ChildItem "build" -Recurse -Filter "*.txt" | ForEach-Object {
              Write-Host "--- $($_.Name) ---" -ForegroundColor Cyan
              Get-Content $_.FullName -Tail 10
            }
          }
          exit 1
        }
        
    - name: üì§ Upload Windows Executable
      uses: actions/upload-artifact@v4
      with:
        name: AndyLibrary-Windows-Standalone
        path: dist/AndyLibrary.exe
        retention-days: 30
        
    - name: üéâ Build Summary
      shell: powershell
      run: |
        Write-Host "=== BUILD COMPLETED SUCCESSFULLY ===" -ForegroundColor Green
        Write-Host "‚úÖ Windows executable built and verified" -ForegroundColor Green
        Write-Host "üì¶ Artifact uploaded as: AndyLibrary-Windows-Standalone" -ForegroundColor Yellow
        Write-Host "üéØ Ready for distribution!" -ForegroundColor Green