#!/usr/bin/env python3
"""
Create PDF Flowchart - Much Better Solution!
- Self-contained PDF format
- Works with any PDF viewer 
- Built-in zoom/navigation
- No browser compatibility issues
- Perfect for management presentations
"""

import subprocess
import sys
import os
from pathlib import Path

def install_required_packages():
    """Install required packages for PDF generation"""
    packages = [
        'reportlab',
        'svglib', 
        'selenium',
        'cairosvg'
    ]
    
    for package in packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"‚úÖ {package} already installed")
        except ImportError:
            print(f"üì¶ Installing {package}...")
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])

def create_pdf_from_html():
    """Create PDF directly from the HTML file using headless browser"""
    
    try:
        from selenium import webdriver
        from selenium.webdriver.chrome.options import Options
        from selenium.webdriver.common.by import By
        from selenium.webdriver.support.ui import WebDriverWait
        from selenium.webdriver.support import expected_conditions as EC
        import time
        
        print("üåê Setting up headless browser...")
        
        # Setup Chrome options
        chrome_options = Options()
        chrome_options.add_argument('--headless')
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--window-size=1920,1080')
        chrome_options.add_argument('--print-to-pdf')
        
        # Get absolute path to HTML file
        html_file_path = os.path.abspath('Docs/Flowchart/HTML/AndyLibrary_Fixed_Registration_Process.html')
        pdf_output_path = os.path.abspath('Docs/Flowchart/PDF/AndyLibrary_Registration_Process.pdf')
        
        # Ensure PDF directory exists
        os.makedirs(os.path.dirname(pdf_output_path), exist_ok=True)
        
        # Create WebDriver
        driver = webdriver.Chrome(options=chrome_options)
        
        try:
            print(f"üìÑ Loading HTML file: {html_file_path}")
            driver.get(f"file://{html_file_path}")
            
            # Wait for Mermaid to render
            print("‚è≥ Waiting for Mermaid diagram to render...")
            WebDriverWait(driver, 30).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, ".mermaid svg"))
            )
            
            # Additional wait for complete rendering
            time.sleep(5)
            
            # Execute print to PDF
            print("üñ®Ô∏è Generating PDF...")
            pdf_options = {
                'landscape': True,
                'displayHeaderFooter': False,
                'printBackground': True,
                'preferCSSPageSize': True,
                'paperWidth': 11.7,  # A4 landscape width in inches
                'paperHeight': 8.3,  # A4 landscape height in inches
                'marginTop': 0,
                'marginBottom': 0,
                'marginLeft': 0,
                'marginRight': 0
            }
            
            result = driver.execute_cdp_cmd('Page.printToPDF', pdf_options)
            
            # Save PDF
            import base64
            with open(pdf_output_path, 'wb') as f:
                f.write(base64.b64decode(result['data']))
            
            print(f"‚úÖ PDF created: {pdf_output_path}")
            return pdf_output_path
            
        finally:
            driver.quit()
            
    except ImportError:
        print("‚ùå Selenium not available. Trying alternative method...")
        return create_pdf_alternative()
    except Exception as e:
        print(f"‚ùå Browser method failed: {e}")
        return create_pdf_alternative()

def create_pdf_alternative():
    """Alternative PDF creation using reportlab directly"""
    
    try:
        from reportlab.lib.pagesizes import A4, landscape
        from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.lib.units import inch
        from reportlab.lib import colors
        import io
        
        print("üìù Creating PDF using ReportLab...")
        
        # Setup PDF document
        pdf_path = 'Docs/Flowchart/PDF/AndyLibrary_Registration_Process.pdf'
        os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
        
        doc = SimpleDocTemplate(
            pdf_path,
            pagesize=landscape(A4),
            rightMargin=0.5*inch,
            leftMargin=0.5*inch,
            topMargin=0.5*inch,
            bottomMargin=0.5*inch
        )
        
        # Get styles
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            textColor=colors.HexColor('#2c3e50'),
            alignment=1  # Center alignment
        )
        
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=16,
            spaceAfter=12,
            textColor=colors.HexColor('#667eea'),
            leftIndent=0
        )
        
        body_style = ParagraphStyle(
            'CustomBody',
            parent=styles['Normal'],
            fontSize=11,
            spaceAfter=6,
            leftIndent=20
        )
        
        # Build content
        content = []
        
        # Title
        content.append(Paragraph("üèõÔ∏è AndyLibrary Registration Process", title_style))
        content.append(Paragraph("Complete User Flow Documentation", styles['Normal']))
        content.append(Spacer(1, 20))
        
        # Process Overview
        content.append(Paragraph("üìã Registration Process Overview", heading_style))
        
        # Required Fields
        content.append(Paragraph("<b>üî¥ Required Fields:</b>", body_style))
        required_fields = [
            "<b>Email Address:</b> Valid format, unique in system",
            "<b>Username:</b> 3-20 characters, alphanumeric only",  
            "<b>Password:</b> 8+ characters, mixed case required",
            "<b>Confirm Password:</b> Must match original password",
            "<b>Mission Acknowledgment:</b> Educational access agreement",
            "<b>Terms Agreement:</b> Legal acceptance required"
        ]
        for field in required_fields:
            content.append(Paragraph(f"‚Ä¢ {field}", body_style))
        
        content.append(Spacer(1, 12))
        
        # Optional Fields  
        content.append(Paragraph("<b>üü° Optional Fields:</b>", body_style))
        optional_fields = [
            "<b>Full Name:</b> Display and personalization purposes",
            "<b>Organization:</b> Institution or company name",
            "<b>Country:</b> Geographic preference selection", 
            "<b>Newsletter:</b> Marketing communications opt-in",
            "<b>Profile Picture:</b> Avatar image upload"
        ]
        for field in optional_fields:
            content.append(Paragraph(f"‚Ä¢ {field}", body_style))
        
        content.append(Spacer(1, 12))
        
        # Process Steps
        content.append(Paragraph("‚ö° Registration Process Steps", heading_style))
        
        process_steps = [
            "<b>1. Initial Load:</b> User opens browser, system loads website and checks existing session",
            "<b>2. Authentication Check:</b> System validates if user is already authenticated",
            "<b>3. Form Display:</b> If not authenticated, registration form is presented",
            "<b>4. Data Entry:</b> User enters required and optional information",
            "<b>5. Client Validation:</b> Real-time validation with visual feedback",
            "<b>6. Form Submission:</b> Data sent to server via POST /api/auth/register",
            "<b>7. Server Validation:</b> Comprehensive security and format checks",
            "<b>8. Duplicate Check:</b> Email and username uniqueness verification",
            "<b>9. Account Creation:</b> User record created with bcrypt password hashing",
            "<b>10. Email Preparation:</b> Verification email template generated",
            "<b>11. SMTP Delivery:</b> Email sent via smtp.gmail.com:465 SSL",
            "<b>12. User Verification:</b> User clicks verification link in email",
            "<b>13. Token Validation:</b> Server validates verification token (24h expiry)",
            "<b>14. Account Activation:</b> EmailVerified and IsActive flags set to TRUE",
            "<b>15. Login Ready:</b> User can now authenticate and access full system"
        ]
        
        for step in process_steps:
            content.append(Paragraph(step, body_style))
            content.append(Spacer(1, 3))
        
        content.append(Spacer(1, 15))
        
        # Technical Details
        content.append(Paragraph("üîß Technical Implementation", heading_style))
        
        tech_details = [
            "<b>Database:</b> SQLite with async support and connection pooling",
            "<b>Password Security:</b> bcrypt hashing with cost factor 12",
            "<b>Token Generation:</b> UUID verification tokens with 24-hour expiration",
            "<b>Email Service:</b> Gmail SMTP with App Password authentication",
            "<b>Validation:</b> Client-side real-time + server-side comprehensive checks",
            "<b>Security:</b> SQL injection prevention, XSS sanitization, CSRF protection",
            "<b>Error Handling:</b> User-friendly error messages with recovery flows",
            "<b>Rate Limiting:</b> Maximum 3 verification email attempts per hour"
        ]
        
        for detail in tech_details:
            content.append(Paragraph(detail, body_style))
            content.append(Spacer(1, 3))
        
        content.append(Spacer(1, 15))
        
        # Footer
        content.append(Paragraph("üìÑ Generated by AndyLibrary System", styles['Normal']))
        content.append(Paragraph("For detailed visual flowchart, see: Docs/Flowchart/HTML/", styles['Normal']))
        
        # Build PDF
        doc.build(content)
        
        print(f"‚úÖ PDF created successfully: {pdf_path}")
        return pdf_path
        
    except Exception as e:
        print(f"‚ùå ReportLab method failed: {e}")
        return None

def create_simple_pdf():
    """Create a simple text-based PDF as fallback"""
    
    print("üìù Creating simple PDF documentation...")
    
    # Read the Mermaid source for reference
    try:
        with open('Docs/Flowchart/Mermaid/AndyLibrary_Fixed_Registration_Process.mmd', 'r') as f:
            mermaid_content = f.read()
    except:
        mermaid_content = "Mermaid source not available"
    
    # Create simple text documentation
    pdf_content = f"""
AndyLibrary Registration Process
==============================

COMPLETE USER REGISTRATION WORKFLOW

Process Flow Summary:
1. START ‚Üí User Opens Browser
2. LOAD WEBSITE ‚Üí Static assets and service worker  
3. CHECK SESSION ‚Üí Validate existing authentication
4. LOAD USER INTERFACE ‚Üí Render forms and validation
5. USER AUTHENTICATED? ‚Üí Decision point
   - YES ‚Üí Proceed to MAIN SYSTEM
   - NO ‚Üí Show registration form

Registration Form Process:
6. SHOW REGISTRATION FORM ‚Üí Display all input fields
7. ENTER REQUIRED FIELDS:
   ‚Ä¢ Email (valid format, unique)
   ‚Ä¢ Username (3-20 chars, alphanumeric) 
   ‚Ä¢ Password (8+ chars, mixed case)
   ‚Ä¢ Confirm Password (must match)
   ‚Ä¢ Mission acknowledgment (required)
   ‚Ä¢ Terms agreement (required)

8. ENTER OPTIONAL FIELDS:
   ‚Ä¢ Full Name
   ‚Ä¢ Organization  
   ‚Ä¢ Country
   ‚Ä¢ Newsletter subscription

9. CLIENT-SIDE VALIDATION ‚Üí Real-time feedback
10. SUBMIT FORM ‚Üí POST to /api/auth/register

Server Processing:
11. SERVER-SIDE VALIDATION ‚Üí Comprehensive checks
12. VALIDATION PASSED? ‚Üí Decision point
    - NO ‚Üí Return field-specific errors ‚Üí Back to form
    - YES ‚Üí Continue to duplicate check

13. CHECK DUPLICATES ‚Üí Query Users table
14. DUPLICATES FOUND? ‚Üí Decision point  
    - YES ‚Üí Return conflict error ‚Üí Back to form
    - NO ‚Üí Proceed to account creation

Account Creation:
15. CREATE USER ACCOUNT:
    ‚Ä¢ Hash password with bcrypt (cost: 12)
    ‚Ä¢ Generate verification token (UUID)
    ‚Ä¢ Set EmailVerified = FALSE
    ‚Ä¢ Set IsActive = FALSE  
    ‚Ä¢ Insert into database

16. ACCOUNT CREATED ‚Üí User record saved
17. PREPARE VERIFICATION EMAIL ‚Üí Template generation
18. SEND EMAIL VIA SMTP ‚Üí smtp.gmail.com:465 SSL

Email Verification:
19. EMAIL SENT? ‚Üí Decision point
    - YES ‚Üí Registration success response
    - NO ‚Üí Partial success (account created, email failed)

20. USER WAITS FOR EMAIL ‚Üí Check inbox and spam
21. EMAIL RECEIVED? ‚Üí Decision point
    - NO ‚Üí Resend email option
    - YES ‚Üí Click verification link

22. CLICK VERIFICATION LINK ‚Üí GET /api/auth/verify-email
23. VALIDATE TOKEN ‚Üí Server-side verification
24. TOKEN VALID? ‚Üí Decision point
    - NO ‚Üí Token error ‚Üí Resend option
    - YES ‚Üí Activate account

Account Activation:
25. ACTIVATE ACCOUNT:
    ‚Ä¢ Set EmailVerified = TRUE
    ‚Ä¢ Set IsActive = TRUE
    ‚Ä¢ Clear verification token
    ‚Ä¢ Create audit log entry

26. VERIFICATION SUCCESS ‚Üí Account fully activated
27. PROCEED TO LOGIN ‚Üí Ready for authentication  
28. LOGIN PROCESS ‚Üí Session creation
29. MAIN SYSTEM ACCESS ‚Üí Full features available
30. END ‚Üí Book access complete

Technical Specifications:
========================

Required Fields Validation:
‚Ä¢ Email: RFC 5322 format validation, unique constraint
‚Ä¢ Username: 3-20 characters, alphanumeric only
‚Ä¢ Password: Minimum 8 characters, mixed case, special chars
‚Ä¢ Confirm Password: Must exactly match original
‚Ä¢ Mission: Boolean true required
‚Ä¢ Terms: Boolean true required

Optional Fields:
‚Ä¢ Full Name: String, display purposes
‚Ä¢ Organization: String, institution/company  
‚Ä¢ Country: Dropdown selection
‚Ä¢ Newsletter: Boolean, marketing opt-in
‚Ä¢ Profile Picture: File upload, avatar

Security Measures:
‚Ä¢ bcrypt password hashing (cost: 12)
‚Ä¢ UUID verification tokens  
‚Ä¢ 24-hour token expiration
‚Ä¢ SQL injection prevention
‚Ä¢ XSS sanitization
‚Ä¢ CSRF token validation
‚Ä¢ Rate limiting (3 emails/hour)

Database Schema:
‚Ä¢ Users table with auto-increment ID
‚Ä¢ EmailVerified boolean flag
‚Ä¢ IsActive boolean flag  
‚Ä¢ SubscriptionTier default 'free'
‚Ä¢ AccessLevel default 'basic'
‚Ä¢ CreatedAt timestamp
‚Ä¢ VerifiedAt timestamp

SMTP Configuration:
‚Ä¢ Server: smtp.gmail.com
‚Ä¢ Port: 465 (SSL)
‚Ä¢ Authentication: App Password
‚Ä¢ Timeout: 30 seconds
‚Ä¢ Retry: 3 attempts
‚Ä¢ Delivery confirmation

Error Handling:
‚Ä¢ Field-specific validation errors
‚Ä¢ User-friendly error messages
‚Ä¢ Recovery flows for all failure points
‚Ä¢ Graceful degradation
‚Ä¢ Admin notification for system errors

Success Responses:
‚Ä¢ HTTP 201 Created for successful registration
‚Ä¢ JSON response with user ID and next steps
‚Ä¢ Clear instructions for email verification
‚Ä¢ Redirect to login after verification

This comprehensive registration system ensures secure, user-friendly 
account creation with robust error handling and recovery mechanisms.

For visual flowchart representation, open:
Docs/Flowchart/HTML/AndyLibrary_Fixed_Registration_Process.html

Source Files:
‚Ä¢ Mermaid: Docs/Flowchart/Mermaid/AndyLibrary_Fixed_Registration_Process.mmd  
‚Ä¢ HTML: Docs/Flowchart/HTML/AndyLibrary_Fixed_Registration_Process.html
‚Ä¢ Documentation: Docs/Flowchart/Documentation/

Generated: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
    
    # Write to simple text file that can be converted to PDF
    pdf_dir = 'Docs/Flowchart/PDF'
    os.makedirs(pdf_dir, exist_ok=True)
    
    text_file = f'{pdf_dir}/AndyLibrary_Registration_Process.txt'
    with open(text_file, 'w') as f:
        f.write(pdf_content)
    
    print(f"‚úÖ Text documentation created: {text_file}")
    print("üí° You can convert this to PDF using any text-to-PDF tool")
    
    return text_file

def main():
    print("üöÄ Creating PDF version of AndyLibrary Registration Process...")
    print("\nüìã PDF Format Benefits:")
    print("   ‚Ä¢ Self-contained - works everywhere")  
    print("   ‚Ä¢ Built-in zoom/navigation in any PDF viewer")
    print("   ‚Ä¢ Perfect for management presentations")
    print("   ‚Ä¢ No browser compatibility issues")
    print("   ‚Ä¢ Easy to share and distribute")
    
    # Create PDF directory
    os.makedirs('Docs/Flowchart/PDF', exist_ok=True)
    
    # Try different methods in order of preference
    pdf_path = None
    
    # Method 1: Try browser-based PDF generation (best quality)
    try:
        print("\nüåê Attempting browser-based PDF generation...")
        install_required_packages()
        pdf_path = create_pdf_from_html()
    except Exception as e:
        print(f"‚ùå Browser method failed: {e}")
    
    # Method 2: Try ReportLab PDF generation  
    if not pdf_path:
        try:
            print("\nüìù Attempting ReportLab PDF generation...")
            pdf_path = create_pdf_alternative()
        except Exception as e:
            print(f"‚ùå ReportLab method failed: {e}")
    
    # Method 3: Create text documentation as fallback
    if not pdf_path:
        print("\nüìÑ Creating text documentation (can be converted to PDF)...")
        pdf_path = create_simple_pdf()
    
    if pdf_path:
        print(f"\n‚úÖ SUCCESS! Documentation created: {pdf_path}")
        print(f"üìÅ Location: {os.path.abspath(pdf_path)}")
        print("\nüéØ ADVANTAGES OF PDF FORMAT:")
        print("   ‚Ä¢ ‚úÖ Works in any PDF viewer (Adobe, Chrome, Firefox, etc.)")
        print("   ‚Ä¢ ‚úÖ Built-in zoom, pan, search functionality")  
        print("   ‚Ä¢ ‚úÖ No browser compatibility issues")
        print("   ‚Ä¢ ‚úÖ Perfect for presentations and sharing")
        print("   ‚Ä¢ ‚úÖ Self-contained - no external dependencies")
        print("\nüöÄ Ready to use! Open with any PDF viewer.")
    else:
        print("\n‚ùå All PDF generation methods failed.")
        print("üí° You can manually convert the HTML file to PDF using:")
        print("   ‚Ä¢ Chrome: Print ‚Üí Save as PDF")
        print("   ‚Ä¢ Firefox: Print ‚Üí Save as PDF") 
        print("   ‚Ä¢ Online converters: HTML-to-PDF services")

if __name__ == "__main__":
    main()